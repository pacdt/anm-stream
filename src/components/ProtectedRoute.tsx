import React from 'react'
import { Navigate, useLocation } from 'react-router-dom'
import { useAuth } from '@/hooks/useAuth'
import { Loading } from '@/components/Loading'

interface ProtectedRouteProps {
  children: React.ReactNode
  requireAuth?: boolean
  redirectTo?: string
}

export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({
  children,
  requireAuth = true,
  redirectTo = '/login'
}) => {
  const { isAuthenticated, isLoading } = useAuth()
  const location = useLocation()

  console.log('üõ°Ô∏è [ProtectedRoute] Estado atual:', {
    pathname: location.pathname,
    requireAuth,
    isAuthenticated,
    isLoading,
    redirectTo
  })

  // Mostrar loading enquanto verifica autentica√ß√£o
  if (isLoading) {
    console.log('‚è≥ [ProtectedRoute] Mostrando loading - verificando autentica√ß√£o...')
    return <Loading fullScreen text="Verificando autentica√ß√£o..." />
  }

  // Se requer autentica√ß√£o e usu√°rio n√£o est√° logado
  if (requireAuth && !isAuthenticated) {
    console.log(`üîí [ProtectedRoute] Redirecionando para ${redirectTo} - autentica√ß√£o necess√°ria`)
    return (
      <Navigate 
        to={redirectTo} 
        state={{ from: location.pathname }} 
        replace 
      />
    )
  }

  // Se n√£o requer autentica√ß√£o e usu√°rio est√° logado (ex: p√°ginas de login)
  if (!requireAuth && isAuthenticated) {
    const from = location.state?.from || '/'
    console.log(`üè† [ProtectedRoute] Usu√°rio logado, redirecionando para ${from}`)
    return <Navigate to={from} replace />
  }

  console.log('‚úÖ [ProtectedRoute] Renderizando children - acesso permitido')
  return <>{children}</>
}